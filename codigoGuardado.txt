// Actualizar una reservación por ID
router.put('/', async (req, res) => {
    const { id } = req.query;
    const { propiedad_id, propietario_id, inquilino_id, fecha_inicio, fecha_fin, fecha_reserva, monto_total } = req.body;
    const sql = 'UPDATE reservaciones SET propiedad_id = ?, propietario_id = ?, inquilino_id = ?, fecha_inicio = ?, fecha_fin = ?, fecha_reserva = ?, monto_total = ? WHERE id = ?';

    try {
        await new Promise((resolve, reject) => {
            conexion.query(sql, [propiedad_id, propietario_id, inquilino_id, fecha_inicio, fecha_fin, fecha_reserva, monto_total, id], (err, result) => {
                if (err) {
                    return reject(err);
                }
                resolve(result);
            });
        });

        const { correo_inquilino, nombre_inquilino, correo_propietario, nombre_propietario, direccion } = await obtenerCorreos(inquilino_id, propietario_id);

        await Promise.all([
            enviarCorreo(
                correo_inquilino,
                'Reservación Actualizada',
                `
                Su reservación ha sido actualizada exitosamente.<br><br>
                <strong>Dirección:</strong> ${direccion}<br>
                <strong>Fecha:</strong> ${fecha_inicio} hasta ${fecha_fin}<br>
                <strong>Monto:</strong> ${monto_total}
                `,
                nombre_inquilino,
                direccion,
                fecha_inicio,
                fecha_fin,
                monto_total
            ),
            enviarCorreo(
                correo_propietario,
                'Reservación Actualizada',
                `
                El inquilino ${nombre_inquilino} ha actualizado su reservación para su propiedad.<br><br>
                <strong>Dirección:</strong> ${direccion}<br>
                <strong>Fecha:</strong> ${fecha_inicio} hasta ${fecha_fin}<br>
                <strong>Monto:</strong> ${monto_total}
                `,
                nombre_propietario,
                direccion,
                fecha_inicio,
                fecha_fin,
                monto_total
            )
        ]);

        res.json({ message: 'Reservación actualizada con éxito y correos enviados.' });
    } catch (error) {
        console.error('Error:', error);
        res.status(500).json({ error: 'Ocurrió un error al actualizar la reservación o al enviar los correos.' });
    }
});

// Eliminar una reservación por ID
router.delete('/', async (req, res) => {
    const { id } = req.query;

    try {
        const detalles = await new Promise((resolve, reject) => {
            const sqlDetalles = `
                SELECT r.*, u.nombre AS nombre_inquilino, u.correo AS correo_inquilino, 
                p.nombre AS nombre_propietario, p.correo AS correo_propietario, prop.direccion
                FROM reservaciones r
                JOIN usuarios u ON r.inquilino_id = u.id
                JOIN usuarios p ON r.propietario_id = p.id
                JOIN propiedades prop ON r.propiedad_id = prop.id
                WHERE r.id = ?
            `;
            conexion.query(sqlDetalles, [id], (err, results) => {
                if (err) {
                    return reject(err);
                }
                if (results.length === 0) {
                    return reject(new Error('Reservación no encontrada'));
                }
                resolve(results[0]);
            });
        });

        const { correo_inquilino, correo_propietario, nombre_inquilino, nombre_propietario, direccion } = detalles;

        await Promise.all([
            enviarCorreo(
                correo_inquilino,
                'Reservación Eliminada',
                `Hola ${nombre_inquilino},

                Tu reservación en la propiedad en ${direccion} ha sido eliminada.
                `,
                nombre_inquilino,
                direccion,
                '',
                '',
                ''
            ),
            enviarCorreo(
                correo_propietario,
                'Reservación Eliminada',
                `Hola ${nombre_propietario},

                La reservación en su propiedad en ${direccion} ha sido eliminada.
                `,
                nombre_propietario,
                direccion,
                '',
                '',
                ''
            )
        ]);

        const sqlEliminar = 'DELETE FROM reservaciones WHERE id = ?';
        await new Promise((resolve, reject) => {
            conexion.query(sqlEliminar, [id], (err, result) => {
                if (err) {
                    return reject(err);
                }
                resolve(result);
            });
        });

        res.json({ message: 'Reservación eliminada y correos enviados con éxito.' });
    } catch (error) {
        console.error('Error:', error);
        res.status(500).json({ error: 'Ocurrió un error al eliminar la reservación o al enviar los correos.' });
    }
});

// Función para obtener detalles adicionales de la reservación
async function obtenerDetallesReservacion(inquilino_id, propietario_id, propiedad_id) {
    return new Promise((resolve, reject) => {
        const sql = `
            SELECT
                i.nombre AS nombre_inquilino,
                p.nombre AS nombre_propietario,
                prop.direccion AS direccion,
                i.correo AS correo_inquilino,
                p.correo AS correo_propietario
            FROM
                usuarios i
            JOIN
                reservaciones r ON r.inquilino_id = i.id
            JOIN
                usuarios p ON r.propietario_id = p.id
            JOIN
                propiedades prop ON r.propiedad_id = prop.id
            WHERE
                r.inquilino_id = ? AND r.propietario_id = ? AND r.propiedad_id = ?
        `;

        conexion.query(sql, [inquilino_id, propietario_id, propiedad_id], (err, results) => {
            if (err) {
                return reject(err);
            }

            if (results.length === 0) {
                return reject(new Error('Detalles de la reservación no encontrados.'));
            }

            resolve(results[0]);
        });
    });
}